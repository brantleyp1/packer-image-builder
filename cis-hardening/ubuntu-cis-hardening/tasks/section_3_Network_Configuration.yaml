---
# 3 Network Configuration
# 3.1 Disable unused network protocols and devices
# 3.1.1 Disable IPv6
# If IPv6 or dual stack is not to be used, it is recommended that IPv6 be disabled to reduce the attack surface of the system.
#- name: 3.1.1 Disable IPv6
#  replace:
#    dest: /etc/default/grub
#    regexp: '^(GRUB_CMDLINE_LINUX=(?!.*ipv6.disable)\"[^\"]*)(\".*)'
#    replace: '\1 ipv6.disable=1\2'
#  notify:
#    - grub restart
#  tags:
#    - section3
#    - level_2_server
#    - level_2_workstation
#    - 3.1.1
# 3.1.2 Ensure wireless interfaces are disabled
# If wireless is not to be used, wireless devices can be disabled to reduce the potential attack surface.
# Edited to correct scripts. Do we need to remove other references to a wireless driver from /etc/modprobe.d/? The test system I used had a file iwlwifi.conf to load the correct drivers
- name: 3.1.2 Ensure wireless interfaces are disabled
  block:
    - name: verify no wireless interfaces are active on the system
      script: 3.1.2.sh
      register: wifiStatus
    - name: 3.1.2 Ensure wireless interfaces are disabled
      script: 3.1.2_disable.sh
      when:
        - wifiStatus.stdout_lines ==  "Wireless is not enabled"
        - disable_wifi
  tags:
    - section3
    - level_1_server
    - level_2_workstation
    - 3.1.2
# 3.2 Network Parameters (Host Only)
# 3.2.1 Ensure packet redirect sending is disabled
# An attacker could use a compromised host to send invalid ICMP redirects to other router devices in an attempt to corrupt routing and have users access a system set up by the attacker as opposed to a valid system.
- name: 3.2.1 Ensure packet redirect sending is disabled
  block:
    - name: 3.2.1 Ensure packet redirect sending is disabled | set
      sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        sysctl_set: true
        state: present
        reload: true
      with_items:
        - { name: net.ipv4.conf.all.send_redirects, value: 0 }
        - { name: net.ipv4.conf.default.send_redirects, value: 0 }
    - name: 3.2.1 Ensure packet redirect sending is disabled | load
      shell: |
        sysctl -w net.ipv4.conf.all.send_redirects=0
        sysctl -w net.ipv4.conf.default.send_redirects=0
        sysctl -w net.ipv4.route.flush=1
  tags:
    - section3
    - level_1_server
    - level_1_workstation
    - 3.1.2
# 3.2.2 Ensure IP forwarding is disabled
# Setting the flags to 0 ensures that a system with multiple interfaces (for example, a hard proxy), will never be able to forward packets, and therefore, never serve as a router.
- name: 3.2.2 Ensure IP forwarding is disabled"
  block:
    - name: 3.2.2 Ensure IP forwarding is disabled | ipv4"
      sysctl:
        name: net.ipv4.ip_forward
        value: "0"
        state: present
        reload: true
    - name: 3.2.2 Ensure IP forwarding is disabled | ipv6"
      sysctl:
        name: net.ipv6.conf.all.forwarding
        value: "0"
        state: present
        reload: true
      # when: IPv6_is_enabled
    - name: 3.2.2 Ensure IP forwarding is disabled | IPV4 load"
      script: 3_2_2.sh
    - name: 3.2.2 Ensure IP forwarding is disabled | IPV6 load"
      script: 3_2_2_2.sh
      # when: IPv6_is_enabled
  tags:
    - section3
    - level_1_server
    - level_1_workstation
    - 3.2.2
# 3.3 Network Parameters (Host and Router)
# 3.3.1 Ensure source routed packets are not accepted
# Setting net.ipv4.conf.all.accept_source_route,
# net.ipv4.conf.default.accept_source_route,
# net.ipv6.conf.all.accept_source_route and
# net.ipv6.conf.default.accept_source_route to 0 disables the system from accepting
# source routed packets. Assume this system was capable of routing packets to Internet
# routable addresses on one interface and private addresses on another interface. Assume
# that the private addresses were not routable to the Internet routable addresses and vice
# versa. Under normal routing circumstances, an attacker from the Internet routable
# addresses could not use the system as a way to reach the private address systems. If,
# however, source routed packets were allowed, they could be used to gain access to the
# private address systems as the route could be specified, rather than rely on routing
# protocols that did not allow this routing.
- name: 3.3.1 Ensure source routed packets are not accepted"
  block:
    - name: 3.3.1 Ensure source routed packets are not accepted | ipv4"
      sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        sysctl_set: true
        state: present
        reload: true
      with_items:
        - { name: net.ipv4.conf.all.accept_source_route, value: 0 }
        - { name: net.ipv4.conf.default.accept_source_route, value: 0 }
    - name: 3.3.1 Ensure source routed packets are not accepted | ipv4 load"
      shell: |
        sysctl -w net.ipv4.conf.all.accept_source_route=0
        sysctl -w net.ipv4.conf.default.accept_source_route=0
        sysctl -w net.ipv4.route.flush=1
    - name: 3.3.1 Ensure source routed packets are not accepted | ipv6"
      sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        sysctl_set: true
        state: present
        reload: true
      with_items:
        - { name: net.ipv6.conf.all.accept_source_route, value: 0 }
        - { name: net.ipv6.conf.default.accept_source_route, value: 0 }
      when:
        - IPv6_is_enabled
    - name: 3.3.1 Ensure source routed packets are not accepted | ipv6 load"
      shell: |
        sysctl -w net.ipv6.conf.all.accept_source_route=0
        sysctl -w net.ipv6.conf.default.accept_source_route=0
        sysctl -w net.ipv6.route.flush=1
      when:
        - IPv6_is_enabled
  tags:
    - section3
    - level_1_server
    - level_1_workstation
    - 3.3.1
# 3.3.2 Ensure ICMP redirects are not accepted
# Attackers could use bogus ICMP redirect messages to maliciously alter the system routing
# tables and get them to send packets to incorrect networks and allow your system packets
# to be captured.
- name: 3.3.2 Ensure ICMP redirects are not accepted | ipv4,ipv6"
  block:
    - name: 3.3.2 Ensure ICMP redirects are not accepted | ipv4"
      sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        sysctl_set: true
        state: present
        reload: true
      with_items:
        - { name: net.ipv4.conf.all.accept_redirects, value: 0 }
        - { name: net.ipv4.conf.default.accept_redirects, value: 0 }
    - name:
      shell: |
        sysctl -w net.ipv4.conf.all.accept_redirects=0
        sysctl -w net.ipv4.conf.default.accept_redirects=0
        sysctl -w net.ipv4.route.flush=1
    - name: 3.3.2 Ensure ICMP redirects are not accepted | ipv6"
      sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        sysctl_set: true
        state: present
        reload: true
      with_items:
        - { name: net.ipv6.conf.all.accept_redirects, value: 0 }
        - { name: net.ipv6.conf.default.accept_redirects, value: 0 }
      when:
        - IPv6_is_enabled
    - name:
      shell: |
        sysctl -w net.ipv6.conf.all.accept_redirects=0
        sysctl -w net.ipv6.conf.default.accept_redirects=0
        sysctl -w net.ipv6.route.flush=1
      when: IPv6_is_enabled
  tags:
    - section3
    - level_1_server
    - level_1_workstation
    - 3.3.2
# 3.3.3 Ensure secure ICMP redirects are not accepted
# It is still possible for even known gateways to be compromised. Setting
# net.ipv4.conf.all.secure_redirects to 0 protects the system from routing table
# updates by possibly compromised known gateways.
- name: 3.3.3 Ensure secure ICMP redirects are not accepted
  block:
    - name: 3.3.3 Ensure secure ICMP redirects are not accepted | save
      sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        sysctl_set: true
        state: present
        reload: true
        ignoreerrors: true
      with_items:
        - { name: net.ipv4.conf.all.secure_redirects, value: 0 }
        - { name: net.ipv4.conf.default.secure_redirects, value: 0 }
    - name: 3.3.3 Ensure secure ICMP redirects are not accepted | load
      shell: |
        sysctl -w net.ipv4.conf.all.secure_redirects=0
        sysctl -w net.ipv4.conf.default.secure_redirects=0
        sysctl -w net.ipv4.route.flush=1
  tags:
    - section3
    - level_1_server
    - level_1_workstation
    - 3.3.3
# 3.3.4 Ensure suspicious packets are logged
# Enabling this feature and logging these packets allows an administrator to investigate the
# possibility that an attacker is sending spoofed packets to their system.
- name: 3.3.4 Ensure suspicious packets are logged
  block:
    - name: 3.3.4 Ensure suspicious packets are logged | save
      sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        sysctl_set: true
        state: present
        reload: true
      with_items:
        - { name: net.ipv4.conf.all.log_martians, value: 1 }
        - { name: net.ipv4.conf.default.log_martians, value: 1 }
    - name: 3.3.4 Ensure suspicious packets are logged | load
      shell: |
        sysctl -w net.ipv4.conf.all.log_martians=1
        sysctl -w net.ipv4.conf.default.log_martians=1
        sysctl -w net.ipv4.route.flush=1
  tags:
    - section3
    - level_1_server
    - level_1_workstation
    - 3.3.4
# 3.3.5 Ensure broadcast ICMP requests are ignored
# Accepting ICMP echo and timestamp requests with broadcast or multicast destinations for
# your network could be used to trick your host into starting (or participating) in a Smurf
# attack. A Smurf attack relies on an attacker sending large amounts of ICMP broadcast
# messages with a spoofed source address. All hosts receiving this message and responding
# would send echo-reply messages back to the spoofed address, which is probably not
# routable. If many hosts respond to the packets, the amount of traffic on the network could
# be significantly multiplied.
- name: 3.3.5 Ensure broadcast ICMP requests are ignored
  block:
    - name: 3.3.5 Ensure broadcast ICMP requests are ignored | save
      sysctl:
        name: net.ipv4.icmp_echo_ignore_broadcasts
        value: "1"
        state: present
        reload: true
    - name: 3.3.5 Ensure broadcast ICMP requests are ignored | load
      shell: |
        sysctl -w net.ipv4.icmp_echo_ignore_broadcasts=1
        sysctl -w net.ipv4.route.flush=1
  tags:
    - section3
    - level_1_server
    - level_1_workstation
    - 3.3.5
# 3.3.6 Ensure bogus ICMP responses are ignored
# Some routers (and some attackers) will send responses that violate RFC-1122 and attempt
# to fill up a log file system with many useless error messages.
- name: 3.3.6 Ensure bogus ICMP responses are ignored
  block:
    - name: 3.3.6 Ensure bogus ICMP responses are ignored | save
      sysctl:
        name: net.ipv4.icmp_ignore_bogus_error_responses
        value: "1"
        state: present
        reload: true
    - name: 3.3.6 Ensure bogus ICMP responses are ignored | load
      shell: |
        sysctl -w net.ipv4.icmp_ignore_bogus_error_responses=1
        sysctl -w net.ipv4.route.flush=1
  tags:
    - section3
    - level_1_server
    - level_1_workstation
    - 3.3.6
# 3.3.7 Ensure Reverse Path Filtering is enabled
# Setting these flags is a good way to deter attackers from sending your system bogus
# packets that cannot be responded to. One instance where this feature breaks down is if
# asymmetrical routing is employed. This would occur when using dynamic routing protocols
# (bgp, ospf, etc) on your system. If you are using asymmetrical routing on your system, you
# will not be able to enable this feature without breaking the routing.
- name: 3.3.7 Ensure Reverse Path Filtering is enabled
  block:
    - name: 3.3.7 Ensure Reverse Path Filtering is enabled | save
      sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        sysctl_set: true
        state: present
        reload: true
      with_items:
        - { name: net.ipv4.conf.all.rp_filter, value: 1 }
        - { name: net.ipv4.conf.default.rp_filter, value: 1 }
    - name: 3.3.7 Ensure Reverse Path Filtering is enabled | load
      shell: |
        sysctl -w net.ipv4.conf.all.rp_filter=1
        sysctl -w net.ipv4.conf.default.rp_filter=1
        sysctl -w net.ipv4.route.flush=1
  tags:
    - section3
    - level_1_server
    - level_1_workstation
    - 3.3.7
# 3.3.8 Ensure TCP SYN Cookies is enabled
# Attackers use SYN flood attacks to perform a denial of service attacked on a system by
# sending many SYN packets without completing the three way handshake. This will quickly
# use up slots in the kernel's half-open connection queue and prevent legitimate connections
# from succeeding. SYN cookies allow the system to keep accepting valid connections, even if
# under a denial of service attack.
- name: 3.3.8 Ensure TCP SYN Cookies is enabled
  block:
    - name: 3.3.8 Ensure TCP SYN Cookies is enabled | save
      sysctl:
        name: net.ipv4.tcp_syncookies
        value: "1"
        state: present
        reload: true
    - name: 3.3.8 Ensure TCP SYN Cookies is enabled | load
      shell: |
        sysctl -w net.ipv4.tcp_syncookies=1
        sysctl -w net.ipv4.route.flush=1
  tags:
    - section3
    - level_1_server
    - level_1_workstation
    - 3.3.8
# 3.3.9 Ensure IPv6 router advertisements are not accepted
# It is recommended that systems do not accept router advertisements as they could be
# tricked into routing traffic to compromised machines. Setting hard routes within the
# system (usually a single default route to a trusted router) protects the system from bad
# routes.
- name: 3.3.9 Ensure IPv6 router advertisements are not accepted
  block:
    - name: 3.3.9 Ensure IPv6 router advertisements are not accepted | save
      sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        state: present
        reload: true
      with_items:
        - { name: net.ipv6.conf.all.accept_ra, value: 0 }
        - { name: net.ipv6.conf.default.accept_ra, value: 0 }
    - name: 3.3.9 Ensure IPv6 router advertisements are not accepted | load
      shell: |
        sysctl -w net.ipv6.conf.all.accept_ra=0
        sysctl -w net.ipv6.conf.default.accept_ra=0
        sysctl -w net.ipv6.route.flush=1
  when: IPv6_is_enabled
  tags:
    - section3
    - level_1_server
    - level_1_workstation
    - 3.3.9
# 3.4 Uncommon Network Protocols
# 3.4.1 Ensure DCCP is disabled
# If the protocol is not required, it is recommended that the drivers not be installed to reduce
# the potential attack surface.
- name: 3.4.1 Ensure DCCP is disabled
  lineinfile:
    dest: /etc/modprobe.d/CIS.conf
    regexp: "^(#)?install dccp(\\s|$)"
    line: "install dccp /bin/true"
    create: true
  tags:
    - section3
    - level_2_server
    - level_2_workstation
    - 3.4.1
# 3.4.2 Ensure SCTP is disabled
# The Stream Control Transmission Protocol (SCTP) is a transport layer protocol used to
# support message oriented communication, with several streams of messages in one
# connection. It serves a similar function as TCP and UDP, incorporating features of both. It is
# message-oriented like UDP, and ensures reliable in-sequence transport of messages with
# congestion control like TCP.
# If the protocol is not being used, it is recommended that kernel module not be loaded,
# disabling the service to reduce the potential attack surface.
- name: 3.4.2 Ensure SCTP is disabled
  lineinfile:
    dest: /etc/modprobe.d/CIS.conf
    regexp: "^(#)?install sctp(\\s|$)"
    line: "install sctp /bin/true"
    create: true
  tags:
    - section3
    - level_2_server
    - level_2_workstation
    - 3.4.2
# 3.4.3 Ensure RDS is disabled
# If the protocol is not being used, it is recommended that kernel module not be loaded,
# disabling the service to reduce the potential attack surface.
# The Reliable Datagram Sockets (RDS) protocol is a transport layer protocol designed to
# provide low-latency, high-bandwidth communications between cluster nodes. It was
# developed by the Oracle Corporation.
- name: 3.4.3 Ensure RDS is disabled
  lineinfile:
    dest: /etc/modprobe.d/CIS.conf
    regexp: "^(#)?install rds(\\s|$)"
    line: "install rds /bin/true"
    create: true
  tags:
    - section3
    - level_2_server
    - level_2_workstation
    - 3.4.3
# 3.4.4 Ensure TIPC is disabled
# The Transparent Inter-Process Communication (TIPC) protocol is designed to provide
# communication between cluster nodes.
- name: 3.4.4 Ensure TIPC is disabled
  lineinfile:
    dest: /etc/modprobe.d/CIS.conf
    regexp: "^(#)?install tipc(\\s|$)"
    line: "install tipc /bin/true"
    create: true
  tags:
    - section3
    - level_2_server
    - level_2_workstation
    - 3.4.4
# 3.5 Firewall Configuration
# Only one method should be used to configure a firewall on the system. Use of more
# than one method could produce unexpected results
# 3.5.1 Configure UncomplicatedFirewall
# 3.5.1.1 Ensure Uncomplicated Firewall is installed
# The Uncomplicated Firewall (ufw) is a frontend for iptables and is particularly well-suited
# for host-based firewalls. ufw provides a framework for managing netfilter, as well as a
# command-line interface for manipulating the firewall
# Rationale:
# A firewall utility is required to configure the Linux kernel's netfilter framework via the
# iptables or nftables back-end.
# The Linux kernel's netfilter framework host-based firewall can protect against threats
# originating from within a corporate network to include malicious mobile code and poorly
# configured software on a host.
# Note: Only one firewall utility should be installed and configured. UFW is dependent on the
# iptables package
- name: 3.5.1.1 Ensure Uncomplicated Firewall is installed | ufw
  block:
    - name: 3.5.1.1 Ensure Uncomplicated Firewall is installed | ufw
      apt:
        name: ufw
        state: present
        install_recommends: false
    - name: 3.5.1.1 Ensure Uncomplicated Firewall is installed | iptables
      apt:
        name: iptables
        state: present
        install_recommends: false
  when: enable_firewall
  tags:
    - section3
    - level_1_server
    - level_1_workstation
    - 3.5.1.1
# 3.5.1.2 Ensure iptables-persistent is not installed
# The iptables-persistent is a boot-time loader for netfilter rules, iptables plugin
# Running both ufw and the services included in the iptables-persistent package may lead to  conflict
- name: 3.5.1.2 Ensure iptables-persistent is not installed
  apt:
    name: iptables-persistent
    state: absent
  when: enable_firewall
  tags:
    - section3
    - level_1_server
    - level_1_workstation
    - 3.5.1.2
# 3.5.1.3 Ensure ufw service is enabled
# When running ufw enable or starting ufw via its initscript, ufw will flush its chains.
# This is required so ufw can maintain a consistent state, but it may drop existing
# connections (eg ssh). ufw does support adding rules before enabling the firewall.
# Run the following command before running ufw enable
- name: 3.5.1.3 Ensure ufw service is enabled
  block:
    - name: 3.5.1.3 Ensure ufw service is enabled
      service:
        name: ufw
        state: started
        enabled: true
    - name: 3.5.1.3 Ensure ufw service is enabled | allow 22 before enable
      ufw:
        rule: "{{ item.rule }}"
        port: "{{ item.port }}"
        proto: "{{ item.proto }}"
      with_items:
        - { rule: "allow", port: "22", proto: "tcp" }
  when: enable_firewall
  tags:
    - section3
    - level_1_server
    - level_1_workstation
    - 3.5.1.3
# 3.5.1.4 Ensure loopback traffic is configured
# Configure the loopback interface to accept traffic. Configure all other interfaces to deny
# traffic to the loopback network (127.0.0.0/8 for IPv4 and ::1/128 for IPv6).
# Loopback traffic is generated between processes on machine and is typically critical to
# operation of the system. The loopback interface is the only place that loopback network
# (127.0.0.0/8 for IPv4 and ::1/128 for IPv6) traffic should be seen, all other interfaces
# should ignore traffic on this network as an anti-spoofing measure.
- name: 3.5.1.4 Ensure loopback traffic is configured
  block:
    - name: 3.5.1.4 Ensure loopback traffic is configured | ingress lo allow in
      ufw:
        rule: allow
        direction: in
        interface: lo
    - name: 3.5.1.4 Ensure loopback traffic is configured  | ingress deny from lo network ipv4
      ufw:
        rule: deny
        direction: in
        from: "127.0.0.0/8"
    - name: 3.5.1.4 Ensure loopback traffic is configured  | ingress deny from lo network ipv6
      ufw:
        rule: deny
        direction: in
        from: "::1"
      when: IPv6_is_enabled
  when: enable_firewall
  tags:
    - section3
    - level_1_server
    - level_1_workstation
    - 3.5.1.4
# 3.5.1.5 Ensure outbound connections are configured
# Configure the firewall rules for new outbound connections.
# Notes:
# Changing firewall settings while connected over network can result in being locked out
# of the system.
# Unlike iptables, when a new outbound rule is added, ufw automatically takes care of
# associated established connections, so no rules for the latter kind are required.
- name: 3.5.1.5 Ensure outbound connections are configured
  shell: |
    ufw allow out on all
  when: enable_firewall
  tags:
    - section3
    - level_1_server
    - level_1_workstation
    - 3.5.1.5
# 3.5.1.6 Ensure firewall rules exist for all open ports
# Any ports that have been opened on non-loopback addresses need firewall rules to govern traffic.
# Notes:
# Changing firewall settings while connected over network can result in being locked out of the system
# The remediation command opens up the port to traffic from all sources. Consult ufw
# documentation and set any restrictions in compliance with site policy
- name: 3.5.1.6 Ensure firewall rules exist for all open ports
  block:
    - name: 3.5.1.6 Ensure firewall rules exist for all open ports | ssh
      ufw:
        rule: allow
        proto: tcp
        port: "{{ item }}"
      loop:
        - 22
        - 1981
    #- name: 3.5.1.6 Ensure firewall rules exist for all open ports | dns
    #  ufw:
    #    rule: allow
    #    proto: "{{ item }}"
    #    port: "53"
    #  loop:
    #    - tcp
    #    - udp
    - name: 3.5.1.6 Ensure firewall rules exist for all open ports | defined ports
      ufw:
        rule: "{{ item.rule }}"
        port: "{{ item.port }}"
        proto: "{{ item.proto }}"
      with_items: "{{ firewall_list_of_ports_to_allow }}"
    - name: 3.5.1.6 Ensure firewall rules exist for all open ports | keep_alived (1)
      ufw:
        # note: Ansible doesn't support "proto: vrrp"
        rule: allow
        from_ip: 224.0.0.18
      when: firewall_allow_keep_alive
    - name: 3.5.1.6 Ensure firewall rules exist for all open ports | keep_alived (2)
      ufw:
        # note: Ansible doesn't support "proto: vrrp"
        rule: allow
        to_ip: 224.0.0.18
      when: firewall_allow_keep_alive
  when: enable_firewall
  tags:
    - section3
    - level_1_server
    - level_1_workstation
    - 3.5.1.6
# 3.5.1.7 Ensure default deny firewall policy
# A default deny policy on connections ensures that any unconfigured network usage will be
# rejected.
# Note: Any port or protocol without a explicit allow before the default deny will be blocked
# Any port and protocol not explicitly allowed will be blocked. The following rules should be
# considered before applying the default deny.
- name: 3.5.1.7 Ensure default deny firewall policy
  block:
    - name: 3.5.1.7 Ensure default deny firewall policy
      shell: |
        ufw default deny incoming
        ufw default allow outgoing
        ufw default deny routed
        ufw logging on
    - name: Enable UFW
      ufw:
        state: enabled
  when: enable_firewall
  tags:
    - section3
    - level_1_server
    - level_1_workstation
    - 3.5.1.7
# 3.5.2 Configure nftables
# 3.5.2.1 Ensure nftables is installed
# 3.5.2.2 Ensure Uncomplicated Firewall is not installed or disabled
# 3.5.2.3 Ensure iptables are flushed
# 3.5.2.4 Ensure a table exists
# 3.5.2.5 Ensure base chains exist
# 3.5.2.6 Ensure loopback traffic is configured
# 3.5.2.7 Ensure outbound and established connections are configured
# 3.5.2.8 Ensure default deny firewall policy
# 3.5.2.9 Ensure nftables service is enabled
# 3.5.2.10 Ensure nftables rules are permanent
# 3.5.3 Configure iptables
# 3.5.3.1.1 Ensure iptables packages are installed
# 3.5.3.1.2 Ensure nftables is not installed
# 3.5.3.1.3 Ensure Uncomplicated Firewall is not installed or disabled
# 3.5.3.2.1 Ensure default deny firewall policy
# 3.5.3.2.2 Ensure loopback traffic is configured
# 3.5.3.2.3 Ensure outbound and established connections are configured
# 3.5.3.2.4 Ensure firewall rules exist for all open ports
# 3.5.3.3.1 Ensure IPv6 default deny firewall policy
# 3.5.3.3.2 Ensure IPv6 loopback traffic is configured
# 3.5.3.3.3 Ensure IPv6 outbound and established connections are configured
# 3.5.3.3.4 Ensure IPv6 firewall rules exist for all open ports
